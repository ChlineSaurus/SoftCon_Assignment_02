Index: src/Turn/HumanInteractionManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Turn/HumanInteractionManager.java b/src/Turn/HumanInteractionManager.java
--- a/src/Turn/HumanInteractionManager.java	
+++ b/src/Turn/HumanInteractionManager.java	
@@ -6,8 +6,7 @@
 
 public class HumanInteractionManager {
 
-    public void DisplayOrRoll()
-            throws IOException {
+    public void DisplayOrRoll()throws IOException {
 
         {
             BufferedReader inputReader = new BufferedReader(
@@ -22,11 +21,22 @@
             }
         }
     }
-    public void ChoseDice(){
+    public void ChoseDice() throws IOException{
+            // make advanced with false input and repeated asking...
+            {
+                BufferedReader inputReader = new BufferedReader(
+                        new InputStreamReader(System.in)
+                );
+
+                System.out.println("Please enter the index of the Dice you want to pick. It is possible to enter multiple at a time. If you do not want to take any more dice type no");
+                String indices = inputReader.readLine();
+                System.out.println(indices);
 
-    }
+            }
+        }
+
     public Boolean Reroll(){
-        return Boolean.TRUE;
+        return Boolean.FALSE;
 
     }
 }
\ No newline at end of file
Index: src/Turn/State/CurrentlyPlaying.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Turn/State/CurrentlyPlaying.java b/src/Turn/State/CurrentlyPlaying.java
--- a/src/Turn/State/CurrentlyPlaying.java	
+++ b/src/Turn/State/CurrentlyPlaying.java	
@@ -11,7 +11,7 @@
     private Boolean interactionFinished = Boolean.FALSE;
     private Boolean tuto = Boolean.FALSE;
     public CurrentlyPlaying(Turn aTurn){this.aTurn = aTurn;}
-    public DiceTower currentPlayerDice = new DiceTower();
+    private DiceTower currentPlayerDice = new DiceTower();
     public HumanInteractionManager humanInteraction = new HumanInteractionManager();
     @Override
     public void next(Turn aTurn) throws IOException {
@@ -35,22 +35,18 @@
         //DrawCard
         System.out.println("Your card is XXXX");
     }
-    private void TurnFlow(){
+    private void TurnFlow() throws IOException {
         while(turnFinished != Boolean.TRUE){
             currentPlayerDice.rollNotTakenDices();
             while(interactionFinished != Boolean.TRUE)
-            if(EvaluateDice(currentPlayerDice) == Boolean.TRUE){
+            if(currentPlayerDice.ValidateDice() == Boolean.TRUE){
                 humanInteraction.ChoseDice();
             }
             else{
-                humanInteraction.Reroll();
+                interactionFinished = humanInteraction.Reroll();
             }
-
-
-        }
-    }
-    private Boolean EvaluateDice(DiceTower currentPlayerDice){
-        
-        return Boolean.TRUE;
-    }
-}
+            System.out.println("interactionFinished");
+
+        }
+    }
+}
\ No newline at end of file
Index: src/dice/DiceTower.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/dice/DiceTower.java b/src/dice/DiceTower.java
--- a/src/dice/DiceTower.java	
+++ b/src/dice/DiceTower.java	
@@ -5,7 +5,8 @@
 public class DiceTower {
     final private ArrayList<Dice> notTakenDices;
     final private ArrayList<Dice> takenDices;
-
+    private Boolean hasValidDice = Boolean.FALSE;
+    private int quantityOfSameDice = 0;
     public DiceTower() {
         notTakenDices = new ArrayList<Dice>();
         for(int i = 0; i < 6; i++) {
@@ -27,7 +28,24 @@
             dice.roll();
         }
     }
-
+    public Boolean ValidateDice() {
+        for(int i = 1; i<7; i++){
+            quantityOfSameDice =0;
+        for (Dice dice : notTakenDices) {
+            if (dice.getFaceValue() == 1 || dice.getFaceValue() == 5) {
+                hasValidDice = Boolean.TRUE;
+            }
+            if(dice.getFaceValue()==i) {
+                quantityOfSameDice++;
+            }
+            if(quantityOfSameDice>=2){
+                hasValidDice = Boolean.TRUE;
+            }
+        }
+        }
+        System.out.println(hasValidDice);
+        return hasValidDice;
+    }
     public boolean madeTutto() {
         return notTakenDices.isEmpty();
     }
